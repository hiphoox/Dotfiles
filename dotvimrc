" Example Vim configuration.
" Copy or symlink to ~/.vimrc or ~/_vimrc.

set nocompatible                  " Must come first because it changes other options.

silent! call pathogen#runtime_append_all_bundles()

let mapleader = ","
let g:mapleader = ","
map <Leader>, :NERDTreeToggle<cr>

syntax enable                     " Turn on syntax highlighting.
filetype plugin indent on         " Turn on file type detection.

runtime macros/matchit.vim        " Load the matchit plugin.

set showcmd                       " Display incomplete commands.
set showmode                      " Display the mode you're in.
set showmatch

set backspace=indent,eol,start    " Intuitive backspacing.

set hidden                        " Handle multiple buffers better.

set wildmenu                      " Enhanced command line completion.
set wildmode=list:longest         " Complete files like a shell.

set ignorecase                    " Case-insensitive searching.
set smartcase                     " But case-sensitive if expression contains a capital letter.
set incsearch                     " Highlight matches as you type.
set showmatch
set hlsearch                      " Highlight matches.

set autoindent
set smartindent
set smarttab

set ruler                         " Show cursor position.
set relativenumber
set gdefault                      " Applies substitutions globally on lines
set cursorline

" Use the same symbols as TextMate for tabstops and EOLs
"set list
set listchars=tab:▸\ ,eol:¬

" Gets rid of the distracting highlighting once I’ve found what I’m looking for
nnoremap <leader><space> :noh<cr> 
" Make the tab key match bracket pairs
nnoremap <tab> %
vnoremap <tab> %
set colorcolumn=100                " Show a colored column at 100 characters 
nnoremap j gj
nnoremap k gk
au FocusLost * :wa
" Lets me quickly open up my ~/.vimrc file in a vertically split window so I can add new things
nnoremap <leader>ev <C-w><C-v><C-l>:e $MYVIMRC<cr>
" Imitates TextMates Ctrl+Q function to re-hardwrap paragraphs of text
nnoremap <leader>W :%s/\s\+$//<cr>:let @/=''<CR>
" fold tag
nnoremap <leader>ft Vatzf
" Strip all trailing whitespace in the current file
nnoremap <leader>q gqip
" Reselect the text that was just pasted
nnoremap <leader>v V`]    
inoremap jj <ESC>
nnoremap <leader>w <C-w>v<C-w>l
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
nnoremap <leader>a :Ack
"set autochdir                     " Automatically use the current file's directory as the working directory

set wrap                          " Turn on line wrapping.
set scrolloff=3                   " Show 3 lines of context around the cursor.

set title                         " Set the terminal's title

set visualbell                    " No beeping.

set nobackup                      " Don't make a backup before overwriting a file.
set nowritebackup                 " And again.
set directory=$HOME/.vim/tmp//,.  " Keep swap files in one location

" UNCOMMENT TO USE
set tabstop=2                    " Global tab width.
set softtabstop=2
set shiftwidth=2                 " And again, related.
set expandtab                    " Use spaces instead of tabs

set laststatus=2                  " Show the status line all the time
" Useful status information at bottom of screen
set statusline=[%n]\ %<%.99f\ %h%w%m%r%y\ %{fugitive#statusline()}%{exists('*CapsLockStatusline')?CapsLockStatusline():''}%=%-16(\ %l,%c-%v\ %)%P

" Or use vividchalk
" desert
"
colorscheme desert

" Tab mappings.
map <leader>tt :tabnew<cr>
map <leader>te :tabedit
map <leader>tc :tabclose<cr>
map <leader>to :tabonly<cr>
map <leader>tn :tabnext<cr>
map <leader>tp :tabprevious<cr>
map <leader>tf :tabfirst<cr>
map <leader>tl :tablast<cr>
map <leader>tm :tabmove

" Turns off Vim’s crazy default regex characters and makes searches use normal regexes
"nnoremap / /\v
"vnoremap / /\v

" Uncomment to use Jamis Buck's file opening plugin
"map <Leader>t :FuzzyFinderTextMate<Enter>
map <Leader>tl :TlistToggle<Enter>
vmap <tab> >gv
vmap <S-Tab> <gv
"imap <Tab> <C-N>
"imap <S-Tab> <C-P>
"map <leader>r :w !ruby \| mvim -c "set nomodified" -<cr>
map <leader>r :w !ruby <cr>
map <leader>fr :set filetype=ruby<cr>
map <leader>fp :set filetype=python<cr>

" Controversial...swap colon and semicolon for easier commands
"nnoremap ; :
"nnoremap : ;

"vnoremap ; :
"vnoremap : ;

nmap <A-j> :m+<CR>==
nmap <A-k> :m-2<CR>==
vmap <A-j> :m'>+<CR>gv=gv
vmap <A-k> :m-2<CR>gv=gv

" Automatic fold settings for specific files. Uncomment to use.
autocmd FileType ruby setlocal foldmethod=syntax
autocmd FileType python setlocal foldmethod=indent
autocmd FileType css  setlocal foldmethod=indent shiftwidth=2 tabstop=2
autocmd FileType objc setlocal foldmethod=syntax
"set foldcolumn=1
set foldlevelstart=0
nnoremap <Space> za
vnoremap <Space> za

function! MyFoldText()
    let line = getline(v:foldstart)

    let nucolwidth = &fdc + &number * &numberwidth
    let windowwidth = winwidth(0) - nucolwidth - 3
    let foldedlinecount = v:foldend - v:foldstart

    " expand tabs into spaces
    let onetab = strpart('          ', 0, &tabstop)
    let line = substitute(line, '\t', onetab, 'g')

    let line = strpart(line, 0, windowwidth - 2 -len(foldedlinecount))
    let fillcharcount = windowwidth - len(line) - len(foldedlinecount) - 4
    return line . '…' . repeat(" ",fillcharcount) . foldedlinecount . '…' . ' '
endfunction
set foldtext=MyFoldText()

""""""""""""""""""""""""""""""
" => Python section
" """"""""""""""""""""""""""""
au FileType python set nocindent
let python_highlight_all = 1
au FileType python syn keyword pythonDecorator True None False self
" Automatically indent the next line after this keywords 
autocmd BufRead *.py set smartindent cinwords=if,elif,else,for,while,try,except,finally,def,class
" Remove all trailing spaces during exit.
autocmd BufWritePre *.py :%s/\s\+$//e
autocmd FileType python set ts=4 sw=4 et
au FileType python set omnifunc=pythoncomplete#
let g:pydiction_location = '/Users/Norber/.vim/bundle/vim-pydiction/complete-dict'
" For the MakeGreen plugin and Ruby RSpec. Uncomment to use.
autocmd BufNewFile,BufRead *_spec.rb compiler rspec

" Omni complete functions
autocmd FileType css set omnifunc=csscomplete#CompleteCSS

